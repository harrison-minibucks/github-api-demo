// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: github/v1/github.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitHub_ListUsers_FullMethodName    = "/github.v1.GitHub/ListUsers"
	GitHub_ListSessions_FullMethodName = "/github.v1.GitHub/ListSessions"
	GitHub_Avatar_FullMethodName       = "/github.v1.GitHub/Avatar"
	GitHub_Logout_FullMethodName       = "/github.v1.GitHub/Logout"
)

// GitHubClient is the client API for GitHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitHubClient interface {
	ListUsers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUsersReply, error)
	ListSessions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSessionsReply, error)
	Avatar(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*AvatarReply, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
}

type gitHubClient struct {
	cc grpc.ClientConnInterface
}

func NewGitHubClient(cc grpc.ClientConnInterface) GitHubClient {
	return &gitHubClient{cc}
}

func (c *gitHubClient) ListUsers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUsersReply, error) {
	out := new(ListUsersReply)
	err := c.cc.Invoke(ctx, GitHub_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitHubClient) ListSessions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSessionsReply, error) {
	out := new(ListSessionsReply)
	err := c.cc.Invoke(ctx, GitHub_ListSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitHubClient) Avatar(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*AvatarReply, error) {
	out := new(AvatarReply)
	err := c.cc.Invoke(ctx, GitHub_Avatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitHubClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, GitHub_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitHubServer is the server API for GitHub service.
// All implementations must embed UnimplementedGitHubServer
// for forward compatibility
type GitHubServer interface {
	ListUsers(context.Context, *ListRequest) (*ListUsersReply, error)
	ListSessions(context.Context, *ListRequest) (*ListSessionsReply, error)
	Avatar(context.Context, *AvatarRequest) (*AvatarReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	mustEmbedUnimplementedGitHubServer()
}

// UnimplementedGitHubServer must be embedded to have forward compatible implementations.
type UnimplementedGitHubServer struct {
}

func (UnimplementedGitHubServer) ListUsers(context.Context, *ListRequest) (*ListUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedGitHubServer) ListSessions(context.Context, *ListRequest) (*ListSessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedGitHubServer) Avatar(context.Context, *AvatarRequest) (*AvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Avatar not implemented")
}
func (UnimplementedGitHubServer) Logout(context.Context, *LogoutRequest) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedGitHubServer) mustEmbedUnimplementedGitHubServer() {}

// UnsafeGitHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitHubServer will
// result in compilation errors.
type UnsafeGitHubServer interface {
	mustEmbedUnimplementedGitHubServer()
}

func RegisterGitHubServer(s grpc.ServiceRegistrar, srv GitHubServer) {
	s.RegisterService(&GitHub_ServiceDesc, srv)
}

func _GitHub_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitHubServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitHub_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitHubServer).ListUsers(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitHub_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitHubServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitHub_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitHubServer).ListSessions(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitHub_Avatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitHubServer).Avatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitHub_Avatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitHubServer).Avatar(ctx, req.(*AvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitHub_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitHubServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitHub_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitHubServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitHub_ServiceDesc is the grpc.ServiceDesc for GitHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.v1.GitHub",
	HandlerType: (*GitHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _GitHub_ListUsers_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _GitHub_ListSessions_Handler,
		},
		{
			MethodName: "Avatar",
			Handler:    _GitHub_Avatar_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _GitHub_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github/v1/github.proto",
}
