// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.1
// source: github/v1/github.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGitHubAvatar = "/github.v1.GitHub/Avatar"
const OperationGitHubListSessions = "/github.v1.GitHub/ListSessions"
const OperationGitHubListUsers = "/github.v1.GitHub/ListUsers"
const OperationGitHubLogout = "/github.v1.GitHub/Logout"

type GitHubHTTPServer interface {
	Avatar(context.Context, *AvatarRequest) (*AvatarReply, error)
	ListSessions(context.Context, *ListRequest) (*ListSessionsReply, error)
	ListUsers(context.Context, *ListRequest) (*ListUsersReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
}

func RegisterGitHubHTTPServer(s *http.Server, srv GitHubHTTPServer) {
	r := s.Route("/")
	r.GET("/github/list-users", _GitHub_ListUsers0_HTTP_Handler(srv))
	r.GET("/github/list-sessions", _GitHub_ListSessions0_HTTP_Handler(srv))
	r.GET("/github/avatar", _GitHub_Avatar0_HTTP_Handler(srv))
	r.GET("/github/logout", _GitHub_Logout0_HTTP_Handler(srv))
}

func _GitHub_ListUsers0_HTTP_Handler(srv GitHubHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitHubListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersReply)
		return ctx.Result(200, reply)
	}
}

func _GitHub_ListSessions0_HTTP_Handler(srv GitHubHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitHubListSessions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSessions(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSessionsReply)
		return ctx.Result(200, reply)
	}
}

func _GitHub_Avatar0_HTTP_Handler(srv GitHubHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AvatarRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitHubAvatar)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Avatar(ctx, req.(*AvatarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AvatarReply)
		return ctx.Result(200, reply)
	}
}

func _GitHub_Logout0_HTTP_Handler(srv GitHubHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitHubLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

type GitHubHTTPClient interface {
	Avatar(ctx context.Context, req *AvatarRequest, opts ...http.CallOption) (rsp *AvatarReply, err error)
	ListSessions(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListSessionsReply, err error)
	ListUsers(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListUsersReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
}

type GitHubHTTPClientImpl struct {
	cc *http.Client
}

func NewGitHubHTTPClient(client *http.Client) GitHubHTTPClient {
	return &GitHubHTTPClientImpl{client}
}

func (c *GitHubHTTPClientImpl) Avatar(ctx context.Context, in *AvatarRequest, opts ...http.CallOption) (*AvatarReply, error) {
	var out AvatarReply
	pattern := "/github/avatar"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGitHubAvatar))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GitHubHTTPClientImpl) ListSessions(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListSessionsReply, error) {
	var out ListSessionsReply
	pattern := "/github/list-sessions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGitHubListSessions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GitHubHTTPClientImpl) ListUsers(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListUsersReply, error) {
	var out ListUsersReply
	pattern := "/github/list-users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGitHubListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GitHubHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/github/logout"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGitHubLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
