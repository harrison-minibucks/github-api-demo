// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.1
// source: todo/v1/todo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTodoAdd = "/todo.v1.Todo/Add"
const OperationTodoDelete = "/todo.v1.Todo/Delete"
const OperationTodoList = "/todo.v1.Todo/List"
const OperationTodoMark = "/todo.v1.Todo/Mark"

type TodoHTTPServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	Mark(context.Context, *MarkRequest) (*MarkReply, error)
}

func RegisterTodoHTTPServer(s *http.Server, srv TodoHTTPServer) {
	r := s.Route("/")
	r.GET("/todo/list", _Todo_List0_HTTP_Handler(srv))
	r.POST("/todo/add", _Todo_Add0_HTTP_Handler(srv))
	r.POST("/todo/delete", _Todo_Delete0_HTTP_Handler(srv))
	r.POST("/todo/mark", _Todo_Mark0_HTTP_Handler(srv))
}

func _Todo_List0_HTTP_Handler(srv TodoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

func _Todo_Add0_HTTP_Handler(srv TodoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddReply)
		return ctx.Result(200, reply)
	}
}

func _Todo_Delete0_HTTP_Handler(srv TodoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*DeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteReply)
		return ctx.Result(200, reply)
	}
}

func _Todo_Mark0_HTTP_Handler(srv TodoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoMark)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Mark(ctx, req.(*MarkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarkReply)
		return ctx.Result(200, reply)
	}
}

type TodoHTTPClient interface {
	Add(ctx context.Context, req *AddRequest, opts ...http.CallOption) (rsp *AddReply, err error)
	Delete(ctx context.Context, req *DeleteRequest, opts ...http.CallOption) (rsp *DeleteReply, err error)
	List(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListReply, err error)
	Mark(ctx context.Context, req *MarkRequest, opts ...http.CallOption) (rsp *MarkReply, err error)
}

type TodoHTTPClientImpl struct {
	cc *http.Client
}

func NewTodoHTTPClient(client *http.Client) TodoHTTPClient {
	return &TodoHTTPClientImpl{client}
}

func (c *TodoHTTPClientImpl) Add(ctx context.Context, in *AddRequest, opts ...http.CallOption) (*AddReply, error) {
	var out AddReply
	pattern := "/todo/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTodoAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodoHTTPClientImpl) Delete(ctx context.Context, in *DeleteRequest, opts ...http.CallOption) (*DeleteReply, error) {
	var out DeleteReply
	pattern := "/todo/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTodoDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodoHTTPClientImpl) List(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/todo/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTodoList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodoHTTPClientImpl) Mark(ctx context.Context, in *MarkRequest, opts ...http.CallOption) (*MarkReply, error) {
	var out MarkReply
	pattern := "/todo/mark"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTodoMark))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
